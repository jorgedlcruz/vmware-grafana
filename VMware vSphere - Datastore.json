{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "InfluxDB",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "panel",
      "id": "bargauge",
      "name": "Bar gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "11.1.4"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "piechart",
      "name": "Pie chart",
      "version": ""
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "VMware vSphere Dashboard - Datastore (Grafana 11.x / InfluxDB v2.x)",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "gnetId": 8162,
  "graphTooltip": 0,
  "id": null,
  "links": [
    {
      "asDropdown": true,
      "icon": "external link",
      "includeVars": true,
      "keepTime": true,
      "tags": [
        "vSphere Telegraf"
      ],
      "targetBlank": true,
      "title": "More Dashboards",
      "type": "dashboards"
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 65
              },
              {
                "color": "dark-orange",
                "value": 75
              },
              {
                "color": "dark-red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "hideTimeOverride": false,
      "id": 123,
      "interval": "1h",
      "options": {
        "displayMode": "lcd",
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {},
        "valueMode": "color"
      },
      "pluginVersion": "11.1.4",
      "targets": [
        {
          "alias": "$tag_source",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_datastore_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"capacity_latest\" or r[\"_field\"] == \"used_latest\")\r\n  |> filter(fn: (r) => r[\"source\"] =~ /${datastore:regex}/)\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with  _value: float(v: r.used_latest) / float(v: r.capacity_latest) * 100.0 }))\r\n  |> group(columns: [\"source\",\"_field\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "timeFrom": "3h",
      "title": "Datastores - Usage Capacity",
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "gK_s8WTMk"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 12
      },
      "id": 55,
      "panels": [],
      "repeat": "datastore",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "gK_s8WTMk"
          },
          "refId": "A"
        }
      ],
      "title": "$datastore",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "decimals": 2,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              }
            ]
          },
          "unit": "deckbytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Total Capacity"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Free Capacity"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 9,
        "x": 0,
        "y": 13
      },
      "hideTimeOverride": true,
      "id": 48,
      "interval": "1h",
      "maxDataPoints": 100,
      "options": {
        "colorMode": "background",
        "fieldOptions": {
          "calcs": [
            "mean"
          ]
        },
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.1.4",
      "targets": [
        {
          "alias": "Total Capacity",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "source"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "vsphere_datastore_disk",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_datastore_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"capacity_latest\")\r\n  |> filter(fn: (r) => r[\"source\"] =~ /${datastore:regex}/)\r\n  |> group(columns: [\"source\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "capacity_latest"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "source",
              "operator": "=~",
              "value": "/^$datastore$/"
            }
          ]
        },
        {
          "alias": "Free Capacity",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "source"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "vsphere_datastore_disk",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_datastore_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"capacity_latest\" or r[\"_field\"] == \"used_latest\")\r\n  |> filter(fn: (r) => r[\"source\"] =~ /${datastore:regex}/)\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with  _value: float(v: r.capacity_latest) - float(v: r.used_latest) }))\r\n  |> group(columns: [\"source\",\"_field\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "capacity_latest"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "source",
              "operator": "=~",
              "value": "/^$datastore$/"
            }
          ]
        }
      ],
      "timeFrom": "3h",
      "title": "Total Capacity",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "decimals": 2,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "min": 0,
          "unit": "deckbytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Used Capacity"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#e36761",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Free Capacity"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#5e91ce",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 15,
        "x": 9,
        "y": 13
      },
      "hideTimeOverride": false,
      "id": 152,
      "interval": "1h",
      "maxDataPoints": 100,
      "options": {
        "displayLabels": [
          "percent"
        ],
        "legend": {
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "values": [
            "value",
            "percent"
          ]
        },
        "pieType": "donut",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.3.0",
      "targets": [
        {
          "alias": "Total Capacity",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "source"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "vsphere_datastore_disk",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_datastore_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"used_latest\")\r\n  |> filter(fn: (r) => r[\"source\"] =~ /${datastore:regex}/)\r\n  |> group(columns: [\"source\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "capacity_latest"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "source",
              "operator": "=~",
              "value": "/^$datastore$/"
            }
          ]
        },
        {
          "alias": "Free Capacity",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "source"
              ],
              "type": "tag"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "vsphere_datastore_disk",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_datastore_disk\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"capacity_latest\" or r[\"_field\"] == \"used_latest\")\r\n  |> filter(fn: (r) => r[\"source\"] =~ /${datastore:regex}/)\r\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with  _value: float(v: r.capacity_latest) - float(v: r.used_latest) }))\r\n  |> group(columns: [\"source\",\"_field\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "capacity_latest"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": [
            {
              "key": "source",
              "operator": "=~",
              "value": "/^$datastore$/"
            }
          ]
        }
      ],
      "timeFrom": "3h",
      "title": "Capacity Summary",
      "type": "piechart"
    },
    {
      "collapsed": false,
      "datasource": {
        "type": "influxdb",
        "uid": "gK_s8WTMk"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 147
      },
      "id": 151,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "gK_s8WTMk"
          },
          "refId": "A"
        }
      ],
      "title": "Contact me:",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "gridPos": {
        "h": 3,
        "w": 5,
        "x": 19,
        "y": 148
      },
      "id": 149,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<a href=\"https://www.jorgedelacruz.es\"><img src=\"https://www.jorgedelacruz.es/wp-content/uploads/2019/04/jorgedelacruz-banner_2efede4ef704c939e63a3763231f5961.png\"></a>",
        "mode": "html"
      },
      "pluginVersion": "11.1.4",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "transparent": true,
      "type": "text"
    }
  ],
  "refresh": "5m",
  "schemaVersion": 39,
  "tags": [
    "VMware",
    "vSphere Datastore",
    "vSphere Telegraf"
  ],
  "templating": {
    "list": [
      {
        "current": {},
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "datasource",
        "options": [],
        "query": "influxdb",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_host_cpu\")\r\n  |> keep(columns: [\"vcenter\"])\r\n  |> distinct(column: \"vcenter\")\r\n  |> group()",
        "hide": 0,
        "includeAll": true,
        "label": "vCenter Server",
        "multi": true,
        "name": "vcenter",
        "options": [],
        "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_host_cpu\")\r\n  |> keep(columns: [\"vcenter\"])\r\n  |> distinct(column: \"vcenter\")\r\n  |> group()",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_cluster_cpu\")\r\n  |> filter(fn: (r) => r[\"vcenter\"] =~ /${vcenter:regex}/)\r\n  |> keep(columns: [\"clustername\"])\r\n  |> distinct(column: \"clustername\")\r\n  |> group()\r\n",
        "hide": 0,
        "includeAll": true,
        "label": "Cluster",
        "multi": true,
        "name": "clustername",
        "options": [],
        "query": {
          "0": "f",
          "1": "r",
          "2": "o",
          "3": "m",
          "4": "(",
          "5": "b",
          "6": "u",
          "7": "c",
          "8": "k",
          "9": "e",
          "10": "t",
          "11": ":",
          "12": " ",
          "13": "v",
          "14": ".",
          "15": "d",
          "16": "e",
          "17": "f",
          "18": "a",
          "19": "u",
          "20": "l",
          "21": "t",
          "22": "B",
          "23": "u",
          "24": "c",
          "25": "k",
          "26": "e",
          "27": "t",
          "28": ")",
          "29": "\r",
          "30": "\n",
          "31": " ",
          "32": " ",
          "33": "|",
          "34": ">",
          "35": " ",
          "36": "r",
          "37": "a",
          "38": "n",
          "39": "g",
          "40": "e",
          "41": "(",
          "42": "s",
          "43": "t",
          "44": "a",
          "45": "r",
          "46": "t",
          "47": ":",
          "48": " ",
          "49": "v",
          "50": ".",
          "51": "t",
          "52": "i",
          "53": "m",
          "54": "e",
          "55": "R",
          "56": "a",
          "57": "n",
          "58": "g",
          "59": "e",
          "60": "S",
          "61": "t",
          "62": "a",
          "63": "r",
          "64": "t",
          "65": ",",
          "66": " ",
          "67": "s",
          "68": "t",
          "69": "o",
          "70": "p",
          "71": ":",
          "72": " ",
          "73": "v",
          "74": ".",
          "75": "t",
          "76": "i",
          "77": "m",
          "78": "e",
          "79": "R",
          "80": "a",
          "81": "n",
          "82": "g",
          "83": "e",
          "84": "S",
          "85": "t",
          "86": "o",
          "87": "p",
          "88": ")",
          "89": "\r",
          "90": "\n",
          "91": " ",
          "92": " ",
          "93": "|",
          "94": ">",
          "95": " ",
          "96": "f",
          "97": "i",
          "98": "l",
          "99": "t",
          "100": "e",
          "101": "r",
          "102": "(",
          "103": "f",
          "104": "n",
          "105": ":",
          "106": " ",
          "107": "(",
          "108": "r",
          "109": ")",
          "110": " ",
          "111": "=",
          "112": ">",
          "113": " ",
          "114": "r",
          "115": "[",
          "116": "\"",
          "117": "_",
          "118": "m",
          "119": "e",
          "120": "a",
          "121": "s",
          "122": "u",
          "123": "r",
          "124": "e",
          "125": "m",
          "126": "e",
          "127": "n",
          "128": "t",
          "129": "\"",
          "130": "]",
          "131": " ",
          "132": "=",
          "133": "=",
          "134": " ",
          "135": "\"",
          "136": "v",
          "137": "s",
          "138": "p",
          "139": "h",
          "140": "e",
          "141": "r",
          "142": "e",
          "143": "_",
          "144": "c",
          "145": "l",
          "146": "u",
          "147": "s",
          "148": "t",
          "149": "e",
          "150": "r",
          "151": "_",
          "152": "c",
          "153": "p",
          "154": "u",
          "155": "\"",
          "156": ")",
          "157": "\r",
          "158": "\n",
          "159": " ",
          "160": " ",
          "161": "|",
          "162": ">",
          "163": " ",
          "164": "f",
          "165": "i",
          "166": "l",
          "167": "t",
          "168": "e",
          "169": "r",
          "170": "(",
          "171": "f",
          "172": "n",
          "173": ":",
          "174": " ",
          "175": "(",
          "176": "r",
          "177": ")",
          "178": " ",
          "179": "=",
          "180": ">",
          "181": " ",
          "182": "r",
          "183": "[",
          "184": "\"",
          "185": "v",
          "186": "c",
          "187": "e",
          "188": "n",
          "189": "t",
          "190": "e",
          "191": "r",
          "192": "\"",
          "193": "]",
          "194": " ",
          "195": "=",
          "196": "=",
          "197": " ",
          "198": "\"",
          "199": "$",
          "200": "{",
          "201": "v",
          "202": "c",
          "203": "e",
          "204": "n",
          "205": "t",
          "206": "e",
          "207": "r",
          "208": "}",
          "209": "\"",
          "210": ")",
          "211": "\r",
          "212": "\n",
          "213": " ",
          "214": " ",
          "215": "|",
          "216": ">",
          "217": " ",
          "218": "k",
          "219": "e",
          "220": "e",
          "221": "p",
          "222": "(",
          "223": "c",
          "224": "o",
          "225": "l",
          "226": "u",
          "227": "m",
          "228": "n",
          "229": "s",
          "230": ":",
          "231": " ",
          "232": "[",
          "233": "\"",
          "234": "c",
          "235": "l",
          "236": "u",
          "237": "s",
          "238": "t",
          "239": "e",
          "240": "r",
          "241": "n",
          "242": "a",
          "243": "m",
          "244": "e",
          "245": "\"",
          "246": "]",
          "247": ")",
          "248": "\r",
          "249": "\n",
          "250": " ",
          "251": " ",
          "252": "|",
          "253": ">",
          "254": " ",
          "255": "d",
          "256": "i",
          "257": "s",
          "258": "t",
          "259": "i",
          "260": "n",
          "261": "c",
          "262": "t",
          "263": "(",
          "264": "c",
          "265": "o",
          "266": "l",
          "267": "u",
          "268": "m",
          "269": "n",
          "270": ":",
          "271": " ",
          "272": "\"",
          "273": "c",
          "274": "l",
          "275": "u",
          "276": "s",
          "277": "t",
          "278": "e",
          "279": "r",
          "280": "n",
          "281": "a",
          "282": "m",
          "283": "e",
          "284": "\"",
          "285": ")",
          "286": "\r",
          "287": "\n",
          "288": " ",
          "289": " ",
          "290": "|",
          "291": ">",
          "292": " ",
          "293": "g",
          "294": "r",
          "295": "o",
          "296": "u",
          "297": "p",
          "298": "(",
          "299": ")",
          "300": "\r",
          "301": "\n",
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_cluster_cpu\")\r\n  |> filter(fn: (r) => r[\"vcenter\"] =~ /${vcenter:regex}/)\r\n  |> keep(columns: [\"clustername\"])\r\n  |> distinct(column: \"clustername\")\r\n  |> group()\r\n"
        },
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_host_cpu\")\r\n  |> filter(fn: (r) => r[\"vcenter\"] =~ /${vcenter:regex}/)\r\n  |> filter(fn: (r) => r[\"clustername\"] =~ /${clustername:regex}/)\r\n  |> keep(columns: [\"esxhostname\"])\r\n  |> distinct(column: \"esxhostname\")\r\n  |> group()",
        "hide": 0,
        "includeAll": true,
        "label": "ESXi Server",
        "multi": true,
        "name": "esxi",
        "options": [],
        "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_host_cpu\")\r\n  |> filter(fn: (r) => r[\"vcenter\"] =~ /${vcenter:regex}/)\r\n  |> filter(fn: (r) => r[\"clustername\"] =~ /${clustername:regex}/)\r\n  |> keep(columns: [\"esxhostname\"])\r\n  |> distinct(column: \"esxhostname\")\r\n  |> group()",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDB}"
        },
        "definition": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_datastore_disk\")\r\n  |> filter(fn: (r) => r[\"vcenter\"] =~ /${vcenter:regex}/)\r\n  |> keep(columns: [\"source\"])\r\n  |> distinct(column: \"source\")\r\n  |> group()",
        "hide": 0,
        "includeAll": true,
        "label": "Datastore",
        "multi": true,
        "name": "datastore",
        "options": [],
        "query": {
          "0": "f",
          "1": "r",
          "2": "o",
          "3": "m",
          "4": "(",
          "5": "b",
          "6": "u",
          "7": "c",
          "8": "k",
          "9": "e",
          "10": "t",
          "11": ":",
          "12": " ",
          "13": "v",
          "14": ".",
          "15": "d",
          "16": "e",
          "17": "f",
          "18": "a",
          "19": "u",
          "20": "l",
          "21": "t",
          "22": "B",
          "23": "u",
          "24": "c",
          "25": "k",
          "26": "e",
          "27": "t",
          "28": ")",
          "29": "\r",
          "30": "\n",
          "31": " ",
          "32": " ",
          "33": "|",
          "34": ">",
          "35": " ",
          "36": "r",
          "37": "a",
          "38": "n",
          "39": "g",
          "40": "e",
          "41": "(",
          "42": "s",
          "43": "t",
          "44": "a",
          "45": "r",
          "46": "t",
          "47": ":",
          "48": " ",
          "49": "v",
          "50": ".",
          "51": "t",
          "52": "i",
          "53": "m",
          "54": "e",
          "55": "R",
          "56": "a",
          "57": "n",
          "58": "g",
          "59": "e",
          "60": "S",
          "61": "t",
          "62": "a",
          "63": "r",
          "64": "t",
          "65": ",",
          "66": " ",
          "67": "s",
          "68": "t",
          "69": "o",
          "70": "p",
          "71": ":",
          "72": " ",
          "73": "v",
          "74": ".",
          "75": "t",
          "76": "i",
          "77": "m",
          "78": "e",
          "79": "R",
          "80": "a",
          "81": "n",
          "82": "g",
          "83": "e",
          "84": "S",
          "85": "t",
          "86": "o",
          "87": "p",
          "88": ")",
          "89": "\r",
          "90": "\n",
          "91": " ",
          "92": " ",
          "93": "|",
          "94": ">",
          "95": " ",
          "96": "f",
          "97": "i",
          "98": "l",
          "99": "t",
          "100": "e",
          "101": "r",
          "102": "(",
          "103": "f",
          "104": "n",
          "105": ":",
          "106": " ",
          "107": "(",
          "108": "r",
          "109": ")",
          "110": " ",
          "111": "=",
          "112": ">",
          "113": " ",
          "114": "r",
          "115": "[",
          "116": "\"",
          "117": "_",
          "118": "m",
          "119": "e",
          "120": "a",
          "121": "s",
          "122": "u",
          "123": "r",
          "124": "e",
          "125": "m",
          "126": "e",
          "127": "n",
          "128": "t",
          "129": "\"",
          "130": "]",
          "131": " ",
          "132": "=",
          "133": "=",
          "134": " ",
          "135": "\"",
          "136": "v",
          "137": "s",
          "138": "p",
          "139": "h",
          "140": "e",
          "141": "r",
          "142": "e",
          "143": "_",
          "144": "d",
          "145": "a",
          "146": "t",
          "147": "a",
          "148": "s",
          "149": "t",
          "150": "o",
          "151": "r",
          "152": "e",
          "153": "_",
          "154": "d",
          "155": "i",
          "156": "s",
          "157": "k",
          "158": "\"",
          "159": ")",
          "160": "\r",
          "161": "\n",
          "162": " ",
          "163": " ",
          "164": "|",
          "165": ">",
          "166": " ",
          "167": "f",
          "168": "i",
          "169": "l",
          "170": "t",
          "171": "e",
          "172": "r",
          "173": "(",
          "174": "f",
          "175": "n",
          "176": ":",
          "177": " ",
          "178": "(",
          "179": "r",
          "180": ")",
          "181": " ",
          "182": "=",
          "183": ">",
          "184": " ",
          "185": "r",
          "186": "[",
          "187": "\"",
          "188": "v",
          "189": "c",
          "190": "e",
          "191": "n",
          "192": "t",
          "193": "e",
          "194": "r",
          "195": "\"",
          "196": "]",
          "197": " ",
          "198": "=",
          "199": "~",
          "200": " ",
          "201": "/",
          "202": "$",
          "203": "{",
          "204": "v",
          "205": "c",
          "206": "e",
          "207": "n",
          "208": "t",
          "209": "e",
          "210": "r",
          "211": ":",
          "212": "r",
          "213": "e",
          "214": "g",
          "215": "e",
          "216": "x",
          "217": "}",
          "218": "/",
          "219": ")",
          "220": "\r",
          "221": "\n",
          "222": " ",
          "223": " ",
          "224": "|",
          "225": ">",
          "226": " ",
          "227": "k",
          "228": "e",
          "229": "e",
          "230": "p",
          "231": "(",
          "232": "c",
          "233": "o",
          "234": "l",
          "235": "u",
          "236": "m",
          "237": "n",
          "238": "s",
          "239": ":",
          "240": " ",
          "241": "[",
          "242": "\"",
          "243": "d",
          "244": "s",
          "245": "n",
          "246": "a",
          "247": "m",
          "248": "e",
          "249": "\"",
          "250": "]",
          "251": ")",
          "252": "\r",
          "253": "\n",
          "254": " ",
          "255": " ",
          "256": "|",
          "257": ">",
          "258": " ",
          "259": "d",
          "260": "i",
          "261": "s",
          "262": "t",
          "263": "i",
          "264": "n",
          "265": "c",
          "266": "t",
          "267": "(",
          "268": "c",
          "269": "o",
          "270": "l",
          "271": "u",
          "272": "m",
          "273": "n",
          "274": ":",
          "275": " ",
          "276": "\"",
          "277": "d",
          "278": "s",
          "279": "n",
          "280": "a",
          "281": "m",
          "282": "e",
          "283": "\"",
          "284": ")",
          "285": "\r",
          "286": "\n",
          "287": " ",
          "288": " ",
          "289": "|",
          "290": ">",
          "291": " ",
          "292": "g",
          "293": "r",
          "294": "o",
          "295": "u",
          "296": "p",
          "297": "(",
          "298": ")",
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"vsphere_datastore_disk\")\r\n  |> filter(fn: (r) => r[\"vcenter\"] =~ /${vcenter:regex}/)\r\n  |> keep(columns: [\"source\"])\r\n  |> distinct(column: \"source\")\r\n  |> group()"
        },
        "refresh": 2,
        "regex": "/^(?!VeeamBackup_)/",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-30m",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "browser",
  "title": "VMware vSphere - Datastore",
  "uid": "nr_QGP0iz",
  "version": 6,
  "weekStart": ""
}